# Python script to run ccne on Bla_Carb AMR genes

import sys
import os
import pandas as pd
import multiprocessing

ccne_amr_list_file = os.path.abspath(sys.argv[1])
amr_results_file = os.path.abspath(sys.argv[2])
ccne_input_file = os.path.abspath(sys.argv[3])
output_dir = os.path.abspath(sys.argv[4])
threads = sys.argv[5]
merged_output_file = os.path.abspath(sys.argv[6])

ccne_amr_list_df = pd.read_csv(ccne_amr_list_file, sep=",", header=0)
amr_results_df = pd.read_csv(amr_results_file, sep="\t", header=0)

# target ccne AMR class and subclass
ccne_class_target = "Bla"
# if bla_class is NA, ccne_bla_class_target = ""
ccne_bla_class_target = "Bla_Carb"

# dict to save all AMR genes analyzed
amr_analyzed_dict = {}

# control the number of jobs running in parallel to 4
if int(threads) < 8:
    threads_single = 1
else:
    threads_single = int(int(threads) / 4)


# function to run ccne cmd
def run_cmd(aro, cmd, work_dir):
    os.system("mkdir -p {}/tmp/{}".format(work_dir, aro))
    os.system("cd {}/tmp/{} && {}".format(work_dir, aro, cmd))


# run ccne on every ARO listed in card_aro_info.xls generated by BacWGSpipe
cmd_dict = {}
for i in range(amr_results_df.shape[0]):
    aro = amr_results_df.iloc[i, ]["ARO Accession"].replace(":", "_")
    aro_name = amr_results_df.iloc[i, ]["ARO Name"]
    aro_family = amr_results_df.iloc[i, ]["AMR Gene Family"]
    aro_class = amr_results_df.iloc[i, ]["Drug Class"]
    aro_mechanism = amr_results_df.iloc[i, ]["Resistance Mechanism"]
    if not ccne_amr_list_df[ccne_amr_list_df["accession"] == aro].empty:
        # if multiple items matched in ccne AMR list, pick the first one
        matched = ccne_amr_list_df[ccne_amr_list_df["accession"] == aro].iloc[0, ]
        ccne_class = matched["class"]
        ccne_bla_class = matched["bla_class"]
        ccne_seqID = matched["seqID"]

        # check if this AMR gene is the target
        if ccne_bla_class_target:
            check_target_bool = ccne_class == ccne_class_target and ccne_bla_class == ccne_bla_class_target
            target = "{} - {}".format(ccne_class_target, ccne_bla_class_target)
        else:
            check_target_bool = ccne_class == ccne_class_target
            target = "{}".format(ccne_class_target)

        # run ccne if this AMR gene is the target
        if check_target_bool:
            amr_analyzed_dict[aro] = [aro_name, aro_family, aro_class, aro_mechanism]
            ccne_output_file = os.path.join(output_dir, "{}_results.xls".format(aro))
            cmd = "ccne-acc --amr {} --in {} --out {} --cpus {}".format(ccne_seqID, ccne_input_file,
                                                                        ccne_output_file, threads_single)
            cmd_dict[aro] = cmd

pool = multiprocessing.Pool(processes=int(threads))
args = [(key, cmd_dict[key], output_dir) for key in cmd_dict]
pool.starmap(run_cmd, args)

# merge all AMR genes results into a single one
sample_list = list(pd.read_csv(ccne_input_file, sep="\t", header=None).iloc[:, 0])
merged_output_df = pd.DataFrame(columns=["ARO Name", "ARO Accession", "AMR Gene Family",
                                         "Drug Class", "Resistance Mechanism"]+sample_list)

for aro in amr_analyzed_dict:
    aro_name = amr_analyzed_dict[aro][0]
    aro_family = amr_analyzed_dict[aro][1]
    aro_class = amr_analyzed_dict[aro][2]
    aro_mechanism = amr_analyzed_dict[aro][3]
    dict_tmp = {"ARO Accession": aro.replace("_", ":"),
                "ARO Name": aro_name,
                "AMR Gene Family": aro_family,
                "Drug Class": aro_class,
                "Resistance Mechanism": aro_mechanism}

    with open(os.path.join(output_dir, "{}_results.xls".format(aro))) as fin:
        # skip the header line
        buf = fin.readline()
        buf = fin.readline()
        while buf:
            items = buf.strip().split("\t")
            sample = items[0]
            # not found
            if sample.startswith("!"):
                dict_tmp[sample.replace("!", "")] = float(0)
            # low alignment quality (e.g. CTX-M-3 vs CTX-M-15)
            elif sample.startswith("*"):
                dict_tmp[sample.replace("*", "")] = float(0)
            else:
                dict_tmp[sample] = float(items[3])
            buf = fin.readline()

    merged_output_df = pd.concat([merged_output_df, pd.DataFrame([dict_tmp])], ignore_index=True)

merged_output_df.to_csv(merged_output_file, sep="\t", header=True, index=False)
