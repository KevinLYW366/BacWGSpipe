############################################################
# Script to extract and merge AMR results generated by RGI #
# By Yewei on 2022.3.10                                    #
############################################################

# Output format:
#          Best_Hit_ARO_1    Best_Hit_ARO_2  ...
# Sample1  Contig:Start:End  ...
# Sample2  ...
# ...

# Library
import sys
import os
import pandas as pd
import xlsxwriter

# Main
if __name__ == "__main__":
    # Input
    # Merged RGI and Abricate (CARD) results file
    card_results_file = sys.argv[1]
    card_index_file = sys.argv[2]

    # Output
    matrix_output_file = sys.argv[3]
    aro_info_output_file = sys.argv[4]
    # Highlighted matrix with 0/1
    binary_matrix_output_file = sys.argv[5]

    # Read CARD index file
    card_index_df = pd.read_csv(card_index_file, sep="\t", header=0)

    # Extract CARD results
    result_dict = {}
    aro_info_dict = {}

    with open(card_results_file, 'r') as fin:
        # header line
        buf = fin.readline()
        buf = fin.readline()
        while buf:
            items = buf.strip().split("\t")
            sample, gene, contig, start, end, accession = items[0], items[1], items[2], items[3], items[4], items[6]
            pos = "{}:{}-{}".format(contig, start, end)
            if sample not in result_dict.keys():
                result_dict[sample] = {}
            if gene not in result_dict[sample].keys():
                result_dict[sample][gene] = pos
            else:
                result_dict[sample][gene] = "{},{}".format(result_dict[sample][gene], pos)
            # extract ARO info
            if gene not in aro_info_dict.keys():
                # in case there is any duplicate row for one ARO in CARD ARO index file
                #print(gene)
                aro_id = list(card_index_df.loc[card_index_df["ARO Name"] == gene]["ARO Accession"])[0]
                aro_gene_family = list(card_index_df.loc[card_index_df["ARO Name"] == gene]["AMR Gene Family"])[0]
                aro_drug_class = list(card_index_df.loc[card_index_df["ARO Name"] == gene]["Drug Class"])[0]
                aro_mechanism = list(card_index_df.loc[card_index_df["ARO Name"] == gene]["Resistance Mechanism"])[0]
                aro_info_dict[gene] = [aro_id, aro_gene_family, aro_drug_class, aro_mechanism]
            buf = fin.readline()

    # Convert dict to dataframe and output
    result_output_df = pd.DataFrame.from_dict(result_dict, orient='index')
    ## the order of samples in output follows that in sample list
    #result_output_df = result_output_df.reindex(sample_list, axis=0)
    #result_output_df = result_output_df.sort_index(axis=1)
    result_output_df.to_csv(matrix_output_file, header=True, index=True, sep='\t')
    # Highlighted matrix with 0/1
    result_output_df_binary = result_output_df.notna().astype(int)
    #result_output_df_binary.to_csv(binary_matrix_output_file, header=True, index=True, sep='\t')
    writer = pd.ExcelWriter(binary_matrix_output_file, engine='xlsxwriter')
    result_output_df_binary.to_excel(writer, sheet_name="Sheet1")
    workbook = writer.book
    worksheet = writer.sheets["Sheet1"]
    len_col = len(result_output_df_binary.columns)
    len_row = len(result_output_df_binary.index)
    # Light red fill with dark red text.
    format1 = workbook.add_format({'bg_color': '#FFC7CE',
                                   'font_color': '#9C0006'})
    worksheet.conditional_format(0, 0, len_row, len_col, {'type': 'cell',
                                                          'criteria': '=',
                                                          'value': 1,
                                                          'format': format1})
    writer.save()

    aro_info_output_df = pd.DataFrame.from_dict(aro_info_dict,
                                                orient='index',
                                                columns=["ARO Accession",
                                                         "AMR Gene Family",
                                                         "Drug Class",
                                                         "Resistance Mechanism"])
    aro_info_output_df = aro_info_output_df.sort_index(axis=0)
    aro_info_output_df.index.name = "ARO Name"
    aro_info_output_df.to_csv(aro_info_output_file, header=True, index=True, sep='\t')

