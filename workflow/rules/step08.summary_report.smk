###########################
# Step 08. Summary Report #
###########################

# Generate summary report using a Rmarkdown script
## Hybrid mode
if config["seqdata_source"] == 0:
        rule summary_report:
            input:
                ##### Step 01. Raw sequencing data pre-processing #####
                # Merged NanoStat QC results for Nanopore long fastq raw reads
                long_read_qc_raw = "results/00.rawdata/long_read/all_raw_NanoStats.xls",
                # Merged NanoStat QC results for Nanopore long fastq clean reads
                long_read_qc_clean = "results/01.data_clean/long_read/all_clean_NanoStats.xls",
                # Merged Fastp QC results
                fastp_stats = "results/01.data_clean/short_read/all_fastp_stats.xls",
                # Kraken2 QC result
                kraken2_qc="results/01.data_clean/short_read/all_kraken2_result.xls",
                ##### Step 02. Assembly #####
                # Merged assembly statistics
                assembly_stats = "results/02.assembly/all_assembly_stats.xls",
                ##### Step 03. Genome annotation and Genomic component analysis #####
                # Gene length distribution plot based on prokka prediction results
                gene_length_plot = lambda wildcards: get_qualified_results("results/03.genome_component/{sample}/prokka/{sample}_gene_length.png",wildcards),
                # Merged plasmid PLSDB annotation results
                plsdb_results = "results/03.genome_component/all_plsdb_results.xls",
                # Merged plasmid mobility prediction results generated by MOB-suite
                mob_suite_results = "results/03.genome_component/all_mob-suite_results.xls",
                # Merged Prophage sequences and annotation results generated by Phigaro
                phigaro_results = "results/03.genome_component/all_phigaro_results.xls",
                # Merged Prediction of ICE and IME in genome sequences of bacteria for all samples by ICEfinder
                icefinder_results = "results/03.genome_component/all_icefinder_results.xls",
                # Merged digIS summary statistics output
                digis_results = "results/03.genome_component/all_digis_results.xls",
                # Merged results of genomic islands predicted by IslandPath-DIMOB
                islandpath_results = "results/03.genome_component/all_islandpath_results.xls",
                # Merged results of CRISPRs predicted by CRISPRCasTyper
                cctyper_results = "results/03.genome_component/all_cctyper_results.xls",
                ##### Step 04. Genome function analysis #####
                # GO annotation plots
                go_plot = lambda wildcards: get_qualified_results("results/04.gene_function/{sample}/GO/{sample}_go.pdf",wildcards),
                # KEGG PATHWAY annotation plots
                kegg_plot = lambda wildcards: get_qualified_results("results/04.gene_function/{sample}/KEGG/{sample}_kegg.pdf",wildcards),
                # COG annotation plots
                cog_plot = lambda wildcards: get_qualified_results("results/04.gene_function/{sample}/COG/{sample}_cog.pdf",wildcards),
                # Taxonomy annotation plots
                taxonomy_plot = lambda wildcards: get_qualified_results("results/04.gene_function/{sample}/Taxonomy/{sample}_taxonomy.pdf",wildcards),
                # Merged CARD annotation results
                card_results = "results/04.gene_function/all_card_results_matrix.xls",
                # Merged VFDB annotation results
                vfdb_results = "results/04.gene_function/all_vfdb_results_matrix.xls",
                # Secretory protein results
                sec_pro_results = lambda wildcards: get_qualified_results("results/04.gene_function/{sample}/secretory_protein/{sample}_secretory_protein_results.xls",wildcards),
                ##### Step05. Genotype #####
                # Merged MLST report
                mlst_results = "results/05.genotype/all_mlst_results.xls",
                ##### Step 06. Genome Visualization #####
                # Flag file when the step of chromosome visualization is done
                mgcplotter_chr = lambda wildcards: get_qualified_results("results/06.genome_visualization/{sample}/mgcplotter/mgcplotter_chr.done",wildcards),
                # Flag file when the step of plasmid visualization is done
                mgcplotter_plas = lambda wildcards: get_qualified_results("results/06.genome_visualization/{sample}/mgcplotter/mgcplotter_plas.done",wildcards),
                # phylogenetic tree file
                phylotree = "results/07.phylogenetics/iqtree/core_gene_alignment.treefile",
                # AMR results
                itol_amr = "results/04.gene_function/all_card_results_matrix.xls",
                # VF results
                itol_vf = "results/04.gene_function/all_vfdb_results_matrix.xls",
                # MLST results
                itol_mlst = "results/05.genotype/all_mlst_results.xls"
            output:
                "results/08.summary_report/summary_report.html"
            params:
                script = "workflow/scripts/run_rmd_hybrid.R",
                rmd_script = "workflow/scripts/generate_summary_html_hybrid.Rmd",
                sample_list = config["sample_list"],
                pass_sample_list = SAMPLE_LIST_UPDATE,
                long_read_qc_dir = "results/01.data_clean/long_read",
                genome_component_dir =  "results/03.genome_component",
                gene_function_dir = "results/04.gene_function",
                genome_visualization_dir = "results/06.genome_visualization"
            log:
                "logs/08.summary_report/summary_report.log"
            conda:
                "R"
            shell:
                # Run a R script to pass parameters to Rmd script
                """
                Rscript --vanilla {params.script} {params.rmd_script} {output} \
                {params.sample_list} {params.pass_sample_list} \
                {input.long_read_qc_raw} {input.long_read_qc_clean} {params.long_read_qc_dir} \
                {input.fastp_stats} {input.kraken2_qc} \
                {input.assembly_stats} {params.genome_component_dir} \
                {input.plsdb_results} {input.mob_suite_results} {input.phigaro_results} \
                {input.icefinder_results} {input.digis_results} {input.islandpath_results} \
                {input.cctyper_results} {params.gene_function_dir} {input.mlst_results} \
                {params.genome_visualization_dir} > {log} 2>&1
                """
## Illumina short reads ONLY
elif config["seqdata_source"] == 2:
    rule summary_report:
        input:
            ##### Step 01. Raw sequencing data pre-processing #####
            # Fastp QC stats
            fastp_qc = "results/01.data_clean/short_read/all_fastp_stats.xls",
            # Kraken2 QC result
            kraken2_qc = "results/01.data_clean/short_read/all_kraken2_result.xls",
            ##### Step 02. Assembly #####
            # Merged assembly statistics
            assembly_stats = "results/02.assembly/all_assembly_stats.xls",
            ##### Step 03. Genome annotation and Genomic component analysis #####
            # Gene length distribution plot based on prokka prediction results
            gene_length_plot = lambda wildcards: get_qualified_results("results/03.genome_component/{sample}/prokka/{sample}_gene_length.png",wildcards),
            # Merged plasmid plasmidfinder results
            plasmidfinder_results = "results/03.genome_component/all_plasmidfinder_results.xls",
            # Merged plasmid platon results
            platon_results = "results/03.genome_component/all_platon_results.xls",
            # Merged Prophage sequences and annotation results generated by Phigaro
            phigaro_results = "results/03.genome_component/all_phigaro_results.xls",
            # Merged Prediction of ICE and IME in genome sequences of bacteria for all samples by ICEfinder
            icefinder_results = "results/03.genome_component/all_icefinder_results.xls",
            # Merged digIS summary statistics output
            digis_results = "results/03.genome_component/all_digis_results.xls",
            # Merged results of genomic islands predicted by IslandPath-DIMOB
            islandpath_results = "results/03.genome_component/all_islandpath_results.xls",
            # Merged results of CRISPRs predicted by CRISPRCasTyper
            cctyper_results = "results/03.genome_component/all_cctyper_results.xls",
            ##### Step 04. Genome function analysis #####
            # GO annotation plots
            go_plot = lambda wildcards: get_qualified_results("results/04.gene_function/{sample}/GO/{sample}_go.pdf",wildcards),
            # KEGG PATHWAY annotation plots
            kegg_plot = lambda wildcards: get_qualified_results("results/04.gene_function/{sample}/KEGG/{sample}_kegg.pdf",wildcards),
            # COG annotation plots
            cog_plot = lambda wildcards: get_qualified_results("results/04.gene_function/{sample}/COG/{sample}_cog.pdf",wildcards),
            # Taxonomy annotation plots
            taxonomy_plot = lambda wildcards: get_qualified_results("results/04.gene_function/{sample}/Taxonomy/{sample}_taxonomy.pdf",wildcards),
            # Merged CARD annotation results
            card_results = "results/04.gene_function/all_card_results_matrix.xls",
            # Merged VFDB annotation results
            vfdb_results = "results/04.gene_function/all_vfdb_results_matrix.xls",
            # Secretory protein results
            sec_pro_results = lambda wildcards: get_qualified_results("results/04.gene_function/{sample}/secretory_protein/{sample}_secretory_protein_results.xls",wildcards),
            ##### Step05. Genotype #####
            # Merged MLST report
            mlst_results = "results/05.genotype/all_mlst_results.xls",
            # phylogenetic tree file
            phylotree = "results/07.phylogenetics/iqtree/core_gene_alignment.treefile",
            # AMR results
            itol_amr = "results/04.gene_function/all_card_results_matrix.xls",
            # VF results
            itol_vf = "results/04.gene_function/all_vfdb_results_matrix.xls",
            # MLST results
            itol_mlst = "results/05.genotype/all_mlst_results.xls"
        output:
            "results/08.summary_report/summary_report.html"
        params:
            script = "workflow/scripts/run_rmd_short.R",
            rmd_script = "workflow/scripts/generate_summary_html_short.Rmd",
            sample_list = config["sample_list"],
            pass_sample_list = SAMPLE_LIST_UPDATE,
            genome_component_dir =  "results/03.genome_component",
            gene_function_dir = "results/04.gene_function"
        log:
            "logs/08.summary_report/summary_report.log"
        conda:
            "R"
        shell:
            # Run a R script to pass parameters to Rmd script
            """
            Rscript --vanilla {params.script} {params.rmd_script} {output} \
            {params.sample_list} {params.pass_sample_list} \
            {input.fastp_qc} {input.kraken2_qc} \
            {input.assembly_stats} {params.genome_component_dir} \
            {input.plasmidfinder_results} {input.platon_results} {input.phigaro_results} \
            {input.icefinder_results} {input.digis_results} {input.islandpath_results} \
            {input.cctyper_results} {params.gene_function_dir} {input.mlst_results} > {log} 2>&1
            """
## Long reads ONLY
elif config["seqdata_source"] == 1:
    rule summary_report:
        input:
            ##### Step 01. Raw sequencing data pre-processing #####
            # Merged NanoStat QC results for Nanopore long fastq raw reads
            long_read_qc_raw = "results/00.rawdata/long_read/all_raw_NanoStats.xls",
            # Merged NanoStat QC results for Nanopore long fastq clean reads
            long_read_qc_clean = "results/01.data_clean/long_read/all_clean_NanoStats.xls",
            ##### Step 02. Assembly #####
            # Merged assembly statistics
            assembly_stats = "results/02.assembly/all_assembly_stats.xls",
            ##### Step 03. Genome annotation and Genomic component analysis #####
            # Gene length distribution plot based on prokka prediction results
            gene_length_plot = lambda wildcards: get_qualified_results("results/03.genome_component/{sample}/prokka/{sample}_gene_length.png",wildcards),
            # Merged plasmid plasmidfinder results
            plasmidfinder_results = "results/03.genome_component/all_plasmidfinder_results.xls",
            # Merged Prophage sequences and annotation results generated by Phigaro
            phigaro_results = "results/03.genome_component/all_phigaro_results.xls",
            # Merged Prediction of ICE and IME in genome sequences of bacteria for all samples by ICEfinder
            icefinder_results = "results/03.genome_component/all_icefinder_results.xls",
            # Merged digIS summary statistics output
            digis_results = "results/03.genome_component/all_digis_results.xls",
            # Merged results of genomic islands predicted by IslandPath-DIMOB
            islandpath_results = "results/03.genome_component/all_islandpath_results.xls",
            # Merged results of CRISPRs predicted by CRISPRCasTyper
            cctyper_results = "results/03.genome_component/all_cctyper_results.xls",
            ##### Step 04. Genome function analysis #####
            # GO annotation plots
            go_plot = lambda wildcards: get_qualified_results("results/04.gene_function/{sample}/GO/{sample}_go.pdf",wildcards),
            # KEGG PATHWAY annotation plots
            kegg_plot = lambda wildcards: get_qualified_results("results/04.gene_function/{sample}/KEGG/{sample}_kegg.pdf",wildcards),
            # COG annotation plots
            cog_plot = lambda wildcards: get_qualified_results("results/04.gene_function/{sample}/COG/{sample}_cog.pdf",wildcards),
            # Taxonomy annotation plots
            taxonomy_plot = lambda wildcards: get_qualified_results("results/04.gene_function/{sample}/Taxonomy/{sample}_taxonomy.pdf",wildcards),
            # Merged CARD annotation results
            card_results = "results/04.gene_function/all_card_results_matrix.xls",
            # Merged VFDB annotation results
            vfdb_results = "results/04.gene_function/all_vfdb_results_matrix.xls",
            # Secretory protein results
            sec_pro_results = lambda wildcards: get_qualified_results("results/04.gene_function/{sample}/secretory_protein/{sample}_secretory_protein_results.xls",wildcards),
            ##### Step05. Genotype #####
            # Merged MLST report
            mlst_results = "results/05.genotype/all_mlst_results.xls",
            # phylogenetic tree file
            phylotree = "results/07.phylogenetics/iqtree/core_gene_alignment.treefile",
            # AMR results
            itol_amr = "results/04.gene_function/all_card_results_matrix.xls",
            # VF results
            itol_vf = "results/04.gene_function/all_vfdb_results_matrix.xls",
            # MLST results
            itol_mlst = "results/05.genotype/all_mlst_results.xls"
        output:
            "results/08.summary_report/summary_report.html"
        params:
            script = "workflow/scripts/run_rmd_long.R",
            rmd_script = "workflow/scripts/generate_summary_html_long.Rmd",
            sample_list = config["sample_list"],
            pass_sample_list = SAMPLE_LIST_UPDATE,
            long_read_qc_dir= "results/01.data_clean/long_read",
            genome_component_dir = "results/03.genome_component",
            gene_function_dir = "results/04.gene_function"
        log:
            "logs/08.summary_report/summary_report.log"
        conda:
            "R"
        shell:
            # Run a R script to pass parameters to Rmd script
            """
            Rscript --vanilla {params.script} {params.rmd_script} {output} \
            {params.sample_list} {params.pass_sample_list} \
            {input.long_read_qc_raw} {input.long_read_qc_clean} {params.long_read_qc_dir} \
            {input.assembly_stats} {params.genome_component_dir} \
            {input.plasmidfinder_results} {input.phigaro_results} \
            {input.icefinder_results} {input.digis_results} {input.islandpath_results} \
            {input.cctyper_results} {params.gene_function_dir} {input.mlst_results} > {log} 2>&1
            """